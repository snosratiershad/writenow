#!/bin/bash
#
# writenow - A simple bash script to write in edit-free mode
#
# Copyright (C) 2023-2025  Salar Nosrati-Ershad
# Copyright (C) 2025  Justin Wong
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Global variables
readonly VERSION="v1.0.1"
readonly PROMPT="> "
readonly ERROR_COLOR="1"
readonly SECOND_COLOR="8"
declare -r -i MAX_ROWS=3
declare -i ROWS=0
declare ROW_LINES=()
declare TERMINATED=false
declare OUTPATH=""

# Print a colored message
# Arguments: message, color
# Output: colored message on stdout
function print_color() {
  local color="$2"
  if [[ -z "$color" ]]; then
    color="15"
  fi
  echo -e "$(tput setaf "$color")$1$(tput sgr0)"
}

# Raise error on stderr
# Arguments: error message
# Globals: ERROR_COLOR
# Output: error message on stderr
function err() {
  print_color "Error: $*" "${ERROR_COLOR}" >&2
}

# Show version information
# Globals: VERSION
# Output: version information on stdout
function version() {
  echo "writenow ${VERSION}"
  echo
  echo "Copyright (C)  2023-2025 Salar Nosrati-Ershad"
  echo "Copyright (C)  2025 Justin Wong"
  echo "License GPLv3: GNU GPL version 3 <https://gnu.org/licenses/gpl.html>"
  echo "This is free software: you are free to change and redistribute it."
  echo "There is NO WARRANTY, to the extent permitted by law."
}

# Show usage information
# Output: usage and version information on stdout
function usage() {
  version
  echo
  echo "Usage: writenow [OPTION]..."
  echo
  echo "Examples:"
  echo "  writenow"
  echo "  writenow -o note.txt"
  echo "  writenow -o ~/notes/\$(date +%Y-%m-%d).txt"
  echo
  echo "Options:"
  echo "  -o <file>       File path where lines will be appended."
  echo "                  If omitted, a file path prompt appears upon exit."
  echo "                  If you Ctrl+C the prompt, then nothing will be saved."
  echo "  -h, --help      Display this help and exit"
  echo "  -v, --version   Display version information and exit"
}

# Validate output file path
# Arguments: output file path
# Output: error message on stderr and exit if path is invalid
# Return: 0 if path is valid, 1 otherwise
function validate_outpath() {
  if [[ -z "$1" ]]; then
    err "Output file path is missing."
    exit 1
  fi
  if ! touch "$1" 2>/dev/null; then
    err "Cannot write to the specified path: $1"
    exit 1
  fi
}

# Parse arguments
# Arguments: first arguments
# Output: error message on stderr and exit if arguments are invalid
# Return: 0 if arguments are valid, 1 otherwise
# Globals: OUTPATH
function parse_args() {
  case "$1" in
    -o)
      OUTPATH="$2"
      validate_outpath "${OUTPATH}"
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -v|--version)
      version
      exit 0
      ;;
    *)
      err "invalid argument:" "$1"
      usage
      exit 1
      ;;
  esac
}

# Check if a dependency is exist
# Arguments: dependency name
# Output: error message on stderr and exit if dependency is not installed
# Return: 0 if dependency is installed, 1 otherwise
function check_dependency() {
  if ! command -v "$1" > /dev/null; then
    err "dependency not found:" "$1"
    exit 1
  fi
}

# Write ROW_LINES in an output file
# Arguments: output file name
# Globals: ROW_LINES
function write_lines() {
  if ! touch "$1" 2>/dev/null; then
    err "Cannot write to the specified path: $1"
    exit 1
  fi

  for row in "${ROW_LINES[@]}"; do
    echo "${row}" >> "$1"
  done
}

# Handle termination signals and write output
# Globals: OUTPATH, TERMINATED
function handle_termination() {
  if $TERMINATED; then
    echo
    exit 0
  fi

  TERMINATED=true
  if [[ -z "$OUTPATH" ]]; then
    echo
    read -r -p "File path to write: " OUTPATH
  fi
  write_lines "${OUTPATH}"
  echo "added ${#ROW_LINES[@]} lines to ${OUTPATH}" >&2
  exit 0
}


# Prompt loop
# Globals: PROMPT, ROW_LINES, ROWS
function prompt_loop() {
  # override IFS to read lines with whitespaces except newline
  local IFS=$'\n'
  local current_line=""
  while true; do
    read -r -n 1 -p "${PROMPT}${current_line}" char
    if [[ $char == $'\x7f' || $char == $'\x08' ]]; then
      if [[ $current_line == "" ]]; then
        if [ ${#ROW_LINES[@]} -eq 0 ]; then
          tput cr
          tput el
          continue
        else
          current_line="${ROW_LINES[-1]}"
          unset 'ROW_LINES[-1]'
          tput cr
          tput el
          if [ $ROWS -le $MAX_ROWS ]; then
            tput cuu "${ROWS}"
            tput dl "${ROWS}"
          else
            tput cuu $(( MAX_ROWS ))
            tput dl $(( MAX_ROWS + 1 ))
          fi
          ROWS+=-1
          local start_index=$(( ROWS - MAX_ROWS ))
          if [ $start_index -lt 0 ]; then
            start_index=0
          fi

          for (( i=start_index; i<ROWS; i++ )); do
            print_color "${ROW_LINES[$i]}" "${SECOND_COLOR}"
          done
        fi
      else
        tput cr
        tput el
        current_line="${current_line::-1}"
      fi
    elif [[ $char == "" ]]; then
      ROW_LINES+=("${current_line}")
      ROWS+=1
      if [ $ROWS -le $MAX_ROWS ]; then
        tput cuu "${ROWS}"
        tput dl "${ROWS}"
      else
        tput cuu $(( MAX_ROWS + 1 ))
        tput dl $(( MAX_ROWS + 1 ))
      fi

      local start_index=$(( ROWS - MAX_ROWS ))
      if [ $start_index -lt 0 ]; then
        start_index=0
      fi

      for (( i=start_index; i<ROWS; i++ )); do
        print_color "${ROW_LINES[$i]}" "${SECOND_COLOR}"
      done
      current_line=""
    else
      tput cr
      tput el
      current_line+=$char
    fi
  done
}

# Main function
function main() {
  # parse arguments
  if [[ $# -gt 0 ]]; then
    # pass all args to parse_args func
    parse_args "$@"
  fi

  # Check dependencies
  # Busybox dependencies are not checked
  check_dependency "tput" # part of ncurses

  # handle termination signals
  trap handle_termination SIGINT SIGTERM

  # Run the prompt loop
  prompt_loop
}


main "$@"
