#!/bin/bash
#
# writenow - A simple bash script to write in edit-free mode
#
# Copyright (C) 2023  Salar Nosrati-Ershad
# Copyright (C) 2025  Justin Wong
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Global variables
readonly VERSION="v0.2.0"
readonly PROMPT="> "
readonly ERROR_COLOR="1"
readonly SECOND_COLOR="8"
declare -r -i MAX_ROWS=3
declare -i ROWS=0
declare ROW_LINES=()
declare TERMINATED=false
declare OUTPATH=""

# Print a colored message
# Arguments: message, color
# Output: colored message on stdout
function print_color() {
  local color="$2"
  if [[ -z "$color" ]]; then
    color="15"
  fi
  echo -e "$(tput setaf "$color")$1$(tput sgr0)"
}

# Raise error on stderr
# Arguments: error message
# Globals: ERROR_COLOR
# Output: error message on stderr
function err() {
  print_color "Error: $*" "${ERROR_COLOR}" >&2
}

# Show version information
# Globals: VERSION
# Output: version information on stdout
function version() {
  echo "writenow ${VERSION}"
  echo
  echo "Copyright (C)  2023 Salar Nosrati-Ershad"
  echo "Copyright (C)  2025 Justin Wong"
  echo "License GPLv3: GNU GPL version 3 <https://gnu.org/licenses/gpl.html>"
  echo "This is free software: you are free to change and redistribute it."
  echo "There is NO WARRANTY, to the extent permitted by law."
}

# Show usage information
# Output: usage and version information on stdout
function usage() {
  version
  echo
  echo "Usage: writenow [OPTION]..."
  echo
  echo "Example: writenow -o ~/notes/\$(date +%Y-%m-%d).txt"
  echo
  echo "  -o <path>       filepath where lines will be appended."
  echo "                  If omitted, a filepath prompt appears upon exit."
  echo "  -h, --help      display this help and exit"
  echo "  -v, --version   display version information and exit"
  echo
}

# Parse arguments
# Arguments: first arguments
# Output: error message on stderr and exit if arguments are invalid
# Return: 0 if arguments are valid, 1 otherwise
# Globals: OUTPATH
function parse_args() {
  case "$1" in
    -o)
      OUTPATH="$2"
      # TODO: touch outpath, and quit with err early if cannot write to that path,
      # like in the case of missing permissions or directory not existing
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -v|--version)
      version
      exit 0
      ;;
    *)
      err "invalid argument:" "$1"
      usage
      exit 1
      ;;
  esac
}

# Check if a dependency is exist
# Arguments: dependency name
# Output: error message on stderr and exit if dependency is not installed
# Return: 0 if dependency is installed, 1 otherwise
function check_dependency() {
  if ! command -v "$1" > /dev/null; then
    err "dependency not found:" "$1"
    exit 1
  fi
}

# Write ROW_LINES in an output file
# Arguments: output file name
# Globals: ROW_LINES
function write_lines() {
  for row in "${ROW_LINES[@]}"; do
    echo "${row}" >> "$1"
  done
  # nice to have newline separating this entry and the next
  echo "" >> "$1"
}

# Handle termination signals and write output
# Globals: OUTPATH, TERMINATED
function handle_termination() {
  if $TERMINATED; then
    echo
    exit 0
  fi

  TERMINATED=true
  if [[ -z "$OUTPATH" ]]; then
    echo
    read -r -p "File name to write: " OUTPATH
  fi
  write_lines "${OUTPATH}"
  echo
  echo "added ${#ROW_LINES[@]} lines to ${OUTPATH}" >&2
  exit 0
}

# Clear prompt lines if exceeds MAX_ROWS and set the foreground color
# Globals: ROWS, ROW_LINES, MAX_ROWS, SECOND_COLOR
function reset_prompt_lines() {
  if [ $ROWS -le $MAX_ROWS ]; then
    tput cuu "${ROWS}"
    tput dl "${ROWS}"
  else
    tput cuu $(( MAX_ROWS + 1 ))
    tput dl $(( MAX_ROWS + 1 ))
  fi

  local start_index=$(( ROWS - MAX_ROWS ))
  if [ $start_index -lt 0 ]; then
    start_index=0
  fi

  for (( i=start_index; i<ROWS; i++ )); do
    print_color "${ROW_LINES[$i]}" "${SECOND_COLOR}"
  done

}

# Prompt loop
# Globals: PROMPT, ROW_LINES, ROWS
function prompt_loop() {
  # override IFS to read lines with whitespaces except newline
  local IFS=$'\n'
  while true; do
    read -r -p "${PROMPT}" line
    ROW_LINES+=("${line}")
    ROWS=${#ROW_LINES[@]}
    reset_prompt_lines
  done
}

# Main function
function main() {
  # parse arguments
  if [[ $# -gt 0 ]]; then
    # pass all args to parse_args func
    parse_args "$@"
  fi

  # Check dependencies
  # Busybox dependencies are not checked
  check_dependency "tput" # part of ncurses

  # handle termination signals
  trap handle_termination SIGINT SIGTERM

  # Run the prompt loop
  prompt_loop
}


main "$@"
